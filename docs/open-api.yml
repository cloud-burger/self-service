openapi: 3.0.3
info:
  description: Api responsible for managing customer orders from the Cloud Burger restaurant
  version: 1.0.0
  title: Self Service
  contact:
    name: Cloud Burger Support
    email: support@cloud-burger.com

servers:
  - url: http://localhost:8080
    description: Local running
paths:
  /customer:
    post:
      tags:
        - Customer
      description: Create customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreateCustomer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /customer/{documentNumber}:
    get:
      tags:
        - Customer
      description: Find customer by document number
      parameters:
        - $ref: '#/components/parameters/DocumentNumber'
      responses:
        '201':
          $ref: '#/components/responses/FindCustomerByDocumentNumber'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /product:
    post:
      tags:
        - Product
      description: Create product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreateProduct'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Product
      description: Update product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          $ref: '#/components/responses/UpdateProduct'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /product/{id}:
    delete:
      tags:
        - Product
      description: Delete product
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  parameters:
    Id:
      in: path
      name: id
      schema:
        $ref: '#/components/schemas/Id'
      required: true
    DocumentNumber:
      in: path
      name: documentNumber
      schema:
        $ref: '#/components/schemas/DocumentNumber'
      required: true
  responses:
    CreateCustomer:
      description: Customer created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerResponse'
    FindCustomerByDocumentNumber:
      description: Customer found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerResponse'
    CreateProduct:
      description: Product created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductResponse'
    UpdateProduct:
      description: Product updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductResponse'
    DeleteProduct:
      description: Product deleted successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductResponse'
    NoContent:
      description: No Content
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestErrorResponse'
    ConflictError:
      description: Conflic Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictErrorResponse'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundErrorResponse'
    InternalServerError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerErrorResponse'
  schemas:
    Id:
      type: string
      example: 297d3ea7-610d-4c46-85f8-e3cb2fa4dd83
      description: Identifier
    DocumentNumber:
      type: string
      example: '53523992060'
      description: Customer document number
    CustomerStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
      example: ACTIVE
      description: Customer status
    CustomerName:
      type: string
      example: John Due
      description: Customer name
    CustomerEmail:
      type: string
      example: johndue@gmail.com
      description: Customer email
    ProductName:
      type: string
      example: X Burger
      description: Product name
    ProductCategory:
      type: string
      enum:
        - BURGER
        - SIDE
        - DRINK
        - DESSERT
      description: Product category
      example: BURGER
    ProductDescription:
      type: string
      example: PÃ£o carne e queijo
      description: Product description
    ProductAmount:
      type: number
      example: 19.99
      description: Product amount
    ProductImage:
      type: string
      format: binary
      description: Product image
    Date:
      type: string
      example: '2024-01-01 23:59:59'
    Reason:
      type: string
      example: Error reason
    CustomerResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        documentNumber:
          $ref: '#/components/schemas/DocumentNumber'
        name:
          $ref: '#/components/schemas/CustomerName'
        status:
          $ref: '#/components/schemas/CustomerStatus'
        email:
          $ref: '#/components/schemas/CustomerEmail'
        createdAt:
          $ref: '#/components/schemas/Date'
        updatedAt:
          $ref: '#/components/schemas/Date'
    ProductResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/ProductName'
        category:
          $ref: '#/components/schemas/ProductCategory'
        description:
          $ref: '#/components/schemas/ProductDescription'
        amount:
          $ref: '#/components/schemas/ProductAmount'
        image:
          $ref: '#/components/schemas/ProductImage'
        createdAt:
          $ref: '#/components/schemas/Date'
        updatedAt:
          $ref: '#/components/schemas/Date'
    NotFoundErrorResponse:
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/Reason'
    InternalServerErrorResponse:
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/Reason'
    ConflictErrorResponse:
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/Reason'
    BadRequestErrorResponse:
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/Reason'
        invalidParams:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Field name
                example: amount
              value:
                type: string
                description: Field value
                example: '1'
              reason:
                type: string
                description: Invalid param reason
                example: Parameter number failed custom validation because is invalid
    CreateCustomerRequest:
      type: object
      properties:
        documentNumber:
          $ref: '#/components/schemas/DocumentNumber'
          required: true
        name:
          $ref: '#/components/schemas/CustomerName'
          required: true
        email:
          $ref: '#/components/schemas/CustomerEmail'
          required: false
    CreateProductRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ProductName'
          required: true
        category:
          $ref: '#/components/schemas/ProductCategory'
          required: true
        description:
          $ref: '#/components/schemas/ProductDescription'
          required: true
        amount:
          $ref: '#/components/schemas/ProductAmount'
          required: true
        image:
          $ref: '#/components/schemas/ProductImage'
          required: true
    UpdateProductRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ProductName'
          required: true
        category:
          $ref: '#/components/schemas/ProductCategory'
          required: true
        description:
          $ref: '#/components/schemas/ProductDescription'
          required: true
        amount:
          $ref: '#/components/schemas/ProductAmount'
          required: true
        image:
          $ref: '#/components/schemas/ProductImage'
          required: true